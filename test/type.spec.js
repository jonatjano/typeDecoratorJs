import {describe, it} from "mocha"
import assert from "assert"
import {type, newBaseType, int} from "../lib/Type.js";

describe("type()", () => {
	class Class{}
	const instance = new Class();
	function fn() {}
	const arrowFn = () => {}

	it("should return argument if typeHint instanceof Type", () => {
		assert.equal(type(Number), type(type(type(type(type(Number))))))
	})

	it("should consider an absence of argument as null", () => {
		assert.equal(type(null), type())
	})

	describe("should return same instance", () => {
		it("for known arguments", () => {
			assert.equal(type(null), type(null))
			assert.equal(type(undefined), type(undefined))
			assert.equal(type(Boolean), type(Boolean))
			assert.equal(type(Number), type(Number))
			assert.equal(type(String), type(String))
			assert.equal(type(Object), type(Object))
			assert.equal(type(Array), type(Array))
			assert.equal(type(Symbol), type(Symbol))
		})

		it("for primitives", () => {
			assert.equal(type(true), type(true))
			assert.equal(type(42), type(42))
			assert.equal(type("lol"), type("lol"))
			assert.equal(type(Symbol.for("symbol")), type(Symbol.for("symbol")))
		})

		it("for other values", () => {
			assert.equal(type(Class), type(Class))
			assert.equal(type(fn), type(fn))
			assert.equal(type(arrowFn), type(arrowFn))
			assert.equal(type({a: 42}), type({a: 42}))
			assert.equal(type([42]), type([42]))
			assert.equal(type(instance), type(instance))
		})

		it("for multiple arguments no matter the order", () => {
			assert.equal(type(0, String), type(0, String))
			assert.equal(type(Number, String), type(String, Number))
		})
	})

	it("should ignore duplicate of the same argument", () => {
		assert.equal(type(String, Number), type(String, String, String, Number))
		assert.equal(type(String), type(String, String, String))
		assert.equal(type(42), type(42, 42, 42))
		assert.equal(type({a: 0}), type({a: 0}, {a: 0}, {a: 0}))
		assert.equal(type([Number]), type([Number], [Number], [Number]))
	})

	describe("null", () => {
		const testType = type(null)
		it("should throw on validation call", () => {
			assert.throws(_ => {testType.isValid(null)})
			assert.throws(_ => {testType.isValid(undefined)})
			assert.throws(_ => {testType.isValid(Class)})
			assert.throws(_ => {testType.isValid(new Class())})
			assert.throws(_ => {testType.isValid(fn)})
			assert.throws(_ => {testType.isValid(arrowFn)})
			assert.throws(_ => {testType.isValid(new Boolean(true))})
			assert.throws(_ => {testType.isValid(new Boolean(false))})
			assert.throws(_ => {testType.isValid(true)})
			assert.throws(_ => {testType.isValid(false)})
			assert.throws(_ => {testType.isValid(42)})
			assert.throws(_ => {testType.isValid(new Number(42))})
			assert.throws(_ => {testType.isValid("test")})
			assert.throws(_ => {testType.isValid(new String("test"))})
			assert.throws(_ => {testType.isValid(Object)})
			assert.throws(_ => {testType.isValid({})})
			assert.throws(_ => {testType.isValid(Array)})
			assert.throws(_ => {testType.isValid([])})
			assert.throws(_ => {testType.isValid(Symbol)})
			assert.throws(_ => {testType.isValid(Symbol())})
		})
	})
	describe("undefined", () => {
		const testType = type(undefined)
		it("should validate everything", () => {
			assert.equal(testType.isValid(null), true)
			assert.equal(testType.isValid(undefined), true)
			assert.equal(testType.isValid(Class), true)
			assert.equal(testType.isValid(fn), true)
			assert.equal(testType.isValid(arrowFn), true)
			assert.equal(testType.isValid(new Boolean(true)), true)
			assert.equal(testType.isValid(new Boolean(false)), true)
			assert.equal(testType.isValid(true), true)
			assert.equal(testType.isValid(false), true)
			assert.equal(testType.isValid(42), true)
			assert.equal(testType.isValid(new Number(42)), true)
			assert.equal(testType.isValid("test"), true)
			assert.equal(testType.isValid(new String("test")), true)
			assert.equal(testType.isValid(Object), true)
			assert.equal(testType.isValid({}), true)
			assert.equal(testType.isValid(Array), true)
			assert.equal(testType.isValid([]), true)
			assert.equal(testType.isValid(Symbol), true)
			assert.equal(testType.isValid(Symbol()), true)
		})
	})
	describe("boolean", () => {
		const testType = type(Boolean)
		it("should validate boolean", () => {
			assert.equal(testType.isValid(null), false)
			assert.equal(testType.isValid(undefined), false)
			assert.equal(testType.isValid(Class), false)
			assert.equal(testType.isValid(fn), false)
			assert.equal(testType.isValid(arrowFn), false)
			assert.equal(testType.isValid(new Boolean(true)), true)
			assert.equal(testType.isValid(new Boolean(false)), true)
			assert.equal(testType.isValid(true), true)
			assert.equal(testType.isValid(false), true)
			assert.equal(testType.isValid(42), false)
			assert.equal(testType.isValid(new Number(42)), false)
			assert.equal(testType.isValid("test"), false)
			assert.equal(testType.isValid(new String("test")), false)
			assert.equal(testType.isValid(Object), false)
			assert.equal(testType.isValid({}), false)
			assert.equal(testType.isValid(Array), false)
			assert.equal(testType.isValid([]), false)
			assert.equal(testType.isValid(Symbol), false)
			assert.equal(testType.isValid(Symbol()), false)
		})
	})
	describe("Number", () => {
		const testType = type(Number)
		it("should validate primitive number and Number instance", () => {
			assert.equal(testType.isValid(null), false)
			assert.equal(testType.isValid(undefined), false)
			assert.equal(testType.isValid(Class), false)
			assert.equal(testType.isValid(fn), false)
			assert.equal(testType.isValid(arrowFn), false)
			assert.equal(testType.isValid(new Boolean(true)), false)
			assert.equal(testType.isValid(new Boolean(false)), false)
			assert.equal(testType.isValid(true), false)
			assert.equal(testType.isValid(false), false)
			assert.equal(testType.isValid(42), true)
			assert.equal(testType.isValid(new Number(42)), true)
			assert.equal(testType.isValid("test"), false)
			assert.equal(testType.isValid(new String("test")), false)
			assert.equal(testType.isValid(Object), false)
			assert.equal(testType.isValid({}), false)
			assert.equal(testType.isValid(Array), false)
			assert.equal(testType.isValid([]), false)
			assert.equal(testType.isValid(Symbol), false)
			assert.equal(testType.isValid(Symbol()), false)
		})
	})
	describe("String", () => {
		const testType = type(String)
		it("should validate primitive string and String instances", () => {
			assert.equal(testType.isValid(null), false)
			assert.equal(testType.isValid(undefined), false)
			assert.equal(testType.isValid(Class), false)
			assert.equal(testType.isValid(fn), false)
			assert.equal(testType.isValid(arrowFn), false)
			assert.equal(testType.isValid(new Boolean(true)), false)
			assert.equal(testType.isValid(new Boolean(false)), false)
			assert.equal(testType.isValid(true), false)
			assert.equal(testType.isValid(false), false)
			assert.equal(testType.isValid(42), false)
			assert.equal(testType.isValid(new Number(42)), false)
			assert.equal(testType.isValid("test"), true)
			assert.equal(testType.isValid(new String("test")), true)
			assert.equal(testType.isValid(Object), false)
			assert.equal(testType.isValid({}), false)
			assert.equal(testType.isValid(Array), false)
			assert.equal(testType.isValid([]), false)
			assert.equal(testType.isValid(Symbol), false)
			assert.equal(testType.isValid(Symbol()), false)
		})
	})
	describe("Object", () => {
		const testType = type(Object)
		it("should validate Object", () => {
			assert.equal(testType.isValid(null), false)
			assert.equal(testType.isValid(undefined), false)
			assert.equal(testType.isValid(Class), false)
			assert.equal(testType.isValid(fn), false)
			assert.equal(testType.isValid(arrowFn), false)
			assert.equal(testType.isValid(new Boolean(true)), true)
			assert.equal(testType.isValid(new Boolean(false)), true)
			assert.equal(testType.isValid(true), false)
			assert.equal(testType.isValid(false), false)
			assert.equal(testType.isValid(42), false)
			assert.equal(testType.isValid(new Number(42)), true)
			assert.equal(testType.isValid("test"), false)
			assert.equal(testType.isValid(new String("test")), true)
			// constructors are functions
			assert.equal(testType.isValid(Object), false)
			assert.equal(testType.isValid({}), true)
			assert.equal(testType.isValid(Array), false)
			assert.equal(testType.isValid([]), false)
			assert.equal(testType.isValid(Symbol), false)
			assert.equal(testType.isValid(Symbol()), false)
		})
	})
	describe("Array", () => {
		const testType = type(Array)
		it("should validate only Array", () => {
			assert.equal(testType.isValid(null), false)
			assert.equal(testType.isValid(undefined), false)
			assert.equal(testType.isValid(Class), false)
			assert.equal(testType.isValid(fn), false)
			assert.equal(testType.isValid(arrowFn), false)
			assert.equal(testType.isValid(new Boolean(true)), false)
			assert.equal(testType.isValid(new Boolean(false)), false)
			assert.equal(testType.isValid(true), false)
			assert.equal(testType.isValid(false), false)
			assert.equal(testType.isValid(42), false)
			assert.equal(testType.isValid(new Number(42)), false)
			assert.equal(testType.isValid("test"), false)
			assert.equal(testType.isValid(new String("test")), false)
			assert.equal(testType.isValid(Object), false)
			assert.equal(testType.isValid({}), false)
			assert.equal(testType.isValid(Array), false)
			assert.equal(testType.isValid([]), true)
			assert.equal(testType.isValid(Symbol), false)
			assert.equal(testType.isValid(Symbol()), false)
		})
	})
	describe("Symbol", () => {
		const testType = type(Symbol)
		it("should validate only Symbol", () => {
			assert.equal(testType.isValid(null), false)
			assert.equal(testType.isValid(undefined), false)
			assert.equal(testType.isValid(Class), false)
			assert.equal(testType.isValid(fn), false)
			assert.equal(testType.isValid(arrowFn), false)
			assert.equal(testType.isValid(new Boolean(true)), false)
			assert.equal(testType.isValid(new Boolean(false)), false)
			assert.equal(testType.isValid(true), false)
			assert.equal(testType.isValid(false), false)
			assert.equal(testType.isValid(42), false)
			assert.equal(testType.isValid(new Number(42)), false)
			assert.equal(testType.isValid("test"), false)
			assert.equal(testType.isValid(new String("test")), false)
			assert.equal(testType.isValid(Object), false)
			assert.equal(testType.isValid({}), false)
			assert.equal(testType.isValid(Array), false)
			assert.equal(testType.isValid([]), false)
			assert.equal(testType.isValid(Symbol), false)
			assert.equal(testType.isValid(Symbol()), true)
		})
	})
	describe("Function", () => {
		const testType = type(Function)
		it("should validate only Fonction", () => {
			assert.equal(testType.isValid(null), false)
			assert.equal(testType.isValid(undefined), false)
			assert.equal(testType.isValid(Class), true)
			assert.equal(testType.isValid(fn), true)
			assert.equal(testType.isValid(arrowFn), true)
			assert.equal(testType.isValid(new Boolean(true)), false)
			assert.equal(testType.isValid(new Boolean(false)), false)
			assert.equal(testType.isValid(true), false)
			assert.equal(testType.isValid(false), false)
			assert.equal(testType.isValid(42), false)
			assert.equal(testType.isValid(new Number(42)), false)
			assert.equal(testType.isValid("test"), false)
			assert.equal(testType.isValid(new String("test")), false)
			assert.equal(testType.isValid(Object), true)
			assert.equal(testType.isValid({}), false)
			assert.equal(testType.isValid(Array), true)
			assert.equal(testType.isValid([]), false)
			assert.equal(testType.isValid(Symbol), true)
			assert.equal(testType.isValid(Symbol()), false)
		})
	})
})

describe("newBaseType", () => {
	it("int", () => {
		assert.equal(int.isValid(0), true)
		assert.equal(int.isValid(1), true)
		assert.equal(int.isValid(42), true)
		assert.equal(int.isValid(-0), true)
		assert.equal(int.isValid(-1), true)
		assert.equal(int.isValid(-42), true)
		assert.equal(int.isValid(0.5), false)
		assert.equal(int.isValid(15.000000001), false)
		assert.equal(int.isValid(-0.5), false)
		assert.equal(int.isValid(-15.000000001), false)
	})

	it("only string of length 1", () => {
		const char = newBaseType(val => typeof val === "string" && val.length === 1, "char", "a")

		assert.equal(char.isValid("a"), true)
		assert.equal(char.isValid("1"), true)
		assert.equal(char.isValid("é"), true)
		assert.equal(char.isValid("\n"), true)
		assert.equal(char.isValid(" "), true)
		assert.equal(char.isValid(""), false)
		assert.equal(char.isValid("ab"), false)
		assert.equal(char.isValid("azergbfvd"), false)
	})
})
/*
console.log("\n\n\n\ntests\n\n\n\n")

// same instance for same type
assert(type(String) === type(String))
assert(type(Number) === type(Number))
assert(type(String) !== type(Number))

// can save a type into a variable
const stringType = type(String)
assert(stringType === type(String))

// calling type() with a type as only argument returns it directly
assert(type(stringType) === stringType)

// valid only accept correct values
assert(stringType.isValid("dz"))
assert(stringType.isValid(new String("dz")))
assert(! stringType.isValid(42))
assert(! stringType.isValid(new Number(42)))
assert(! stringType.isValid(null))
assert(! stringType.isValid(undefined))
assert(! stringType.isValid({}))
assert(! stringType.isValid([]))
assert(! stringType.isValid(Symbol()))



assert(tupleOf(String, String, Number) === tupleOf(String, String, Number))
*/
